/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BPos.View;

import BPos.DB.Customer;
import BPos.DB.Products;
import BPos.DB.QtyType;
import BPos.DB.Stockupdated;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author Bhagya
 */
public class Stock extends javax.swing.JFrame {

    /**
     * Creates new form Stock
     */
    String selectedvalue;

    public Stock() {
        initComponents();
        Loadstock();
        // LoadSupplier();
        String s[] = {"proname", "qty", "buyingPrice", "sellingPrice"};
        for (String s1 : s) {
            COMBO_SEARCH.addItem(s1);
        }
        loadTypes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Stock_MainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TEXT_SEARCH = new javax.swing.JTextField();
        COMBO_SEARCH = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        LAB_COUNT = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        Qty = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Reason = new javax.swing.JTextArea();
        ExpireDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        BPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        SPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        BTN_SAVE1 = new javax.swing.JButton();
        BTN_UPDATE = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        Active = new javax.swing.JRadioButton();
        Deactive = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        Disco = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        QTYTYPES = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        Stock_MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        Stock_MainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 153, 255)));

        jLabel1.setText("Search By :");

        TEXT_SEARCH.setForeground(new java.awt.Color(204, 204, 204));
        TEXT_SEARCH.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TEXT_SEARCHFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TEXT_SEARCHFocusLost(evt);
            }
        });
        TEXT_SEARCH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TEXT_SEARCHKeyReleased(evt);
            }
        });

        COMBO_SEARCH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COMBO_SEARCHActionPerformed(evt);
            }
        });

        jLabel2.setText("Customer Count :");

        LAB_COUNT.setText("000");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock ID", "Product Name", "Available Qty", "Added Date", "Expire Date", "Buying Price", "Selling Price", "Status", "Discount", "Can Loosing", "Qty type"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QtyKeyTyped(evt);
            }
        });

        jLabel4.setText("Product Qty : ");

        jLabel5.setText("Reason : ");

        Reason.setColumns(20);
        Reason.setRows(5);
        jScrollPane1.setViewportView(Reason);

        jLabel6.setText("Expire Date : ");

        BPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BPriceKeyTyped(evt);
            }
        });

        jLabel7.setText("Buying price :");

        SPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SPriceKeyTyped(evt);
            }
        });

        jLabel8.setText("Selling Price : ");

        BTN_SAVE1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BPos/Img/btn/Reset S.png"))); // NOI18N
        BTN_SAVE1.setText("Clear");
        BTN_SAVE1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        BTN_SAVE1.setContentAreaFilled(false);
        BTN_SAVE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SAVE1ActionPerformed(evt);
            }
        });

        BTN_UPDATE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BPos/Img/btn/updateL.png"))); // NOI18N
        BTN_UPDATE.setText("Update");
        BTN_UPDATE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 153, 255)));
        BTN_UPDATE.setContentAreaFilled(false);
        BTN_UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_UPDATEActionPerformed(evt);
            }
        });

        jLabel9.setText("Status     :");

        buttonGroup1.add(Active);
        Active.setText("Active");

        buttonGroup1.add(Deactive);
        Deactive.setText("Deactivate");

        jLabel10.setText("Discount  :");

        Disco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DiscoKeyTyped(evt);
            }
        });

        jCheckBox1.setText("Can Loosing");

        jLabel11.setText("Qty Type :");

        jLabel12.setText("Loosing : ");

        javax.swing.GroupLayout Stock_MainPanelLayout = new javax.swing.GroupLayout(Stock_MainPanel);
        Stock_MainPanel.setLayout(Stock_MainPanelLayout);
        Stock_MainPanelLayout.setHorizontalGroup(
            Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(COMBO_SEARCH, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TEXT_SEARCH, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(LAB_COUNT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Stock_MainPanelLayout.createSequentialGroup()
                                                        .addGap(11, 11, 11)
                                                        .addComponent(Active)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(Deactive))
                                                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(Disco, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                                            .addComponent(QTYTYPES, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel12)
                                                .addGap(18, 18, 18)
                                                .addComponent(jCheckBox1))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Stock_MainPanelLayout.createSequentialGroup()
                                                .addGap(376, 376, 376)
                                                .addComponent(BTN_SAVE1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(BTN_UPDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                        .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ExpireDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        Stock_MainPanelLayout.setVerticalGroup(
            Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(COMBO_SEARCH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TEXT_SEARCH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(LAB_COUNT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel6))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(BPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)
                                        .addComponent(SPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8))))
                            .addComponent(ExpireDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(Active)
                                        .addComponent(Deactive)))
                                .addGap(18, 18, 18)
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Disco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12)
                                    .addComponent(jCheckBox1))
                                .addGap(18, 18, 18)
                                .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(QTYTYPES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(Stock_MainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(Stock_MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_UPDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BTN_SAVE1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Stock_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Stock_MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TEXT_SEARCHFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TEXT_SEARCHFocusGained

    }//GEN-LAST:event_TEXT_SEARCHFocusGained

    private void TEXT_SEARCHFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TEXT_SEARCHFocusLost

    }//GEN-LAST:event_TEXT_SEARCHFocusLost

    private void TEXT_SEARCHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TEXT_SEARCHKeyReleased
        try {
            if (TEXT_SEARCH.getText().equals("")) {
                Loadstock();
            } else {
                Vector v1 = new Vector();
                DefaultTableModel dt = (DefaultTableModel) jTable2.getModel();
                Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
                Criteria cr = ses.createCriteria(BPos.DB.Stock.class);
                if (COMBO_SEARCH.getSelectedItem().toString().equals("proname")) {

                    Criteria cr1 = ses.createCriteria(BPos.DB.Products.class);
                    cr1.add(Restrictions.eq("proName", TEXT_SEARCH.getText()));
                    List<BPos.DB.Products> lo = cr1.list();
                    for (Products lo1 : lo) {
                        BPos.DB.Products p = (BPos.DB.Products) ses.load(BPos.DB.Products.class, lo1.getIdProducts());
                        cr.add(Restrictions.eq("products", p));
                    }

                } else {
                    cr.add(Restrictions.eq(COMBO_SEARCH.getSelectedItem().toString(), Double.parseDouble(TEXT_SEARCH.getText())));
                }
                List<BPos.DB.Stock> l = cr.list();
                dt.setRowCount(0);
                for (BPos.DB.Stock l1 : l) {
                    if (!(l1.getStatus() == 4)) {
                        Vector v = new Vector();
                        v.add(l1.getIdstock());
                        v.add(l1.getProducts().getProName());
                        v.add(l1.getQty());
                        v.add(l1.getBuyDate());
                        v.add(l1.getExdate());
                        v.add(l1.getBuyingPrice());
                        v.add(l1.getSellingPrice());
                        int t = l1.getStatus();
                        if (t == 1) {
                            v.add("Active");
                        } else {
                            v.add("Deactivated");
                        }

                        v.add(l1.getDiscount() + "%");

                        if (l1.getCanloosing() == 1) {
                            v.add("Yes");
                        } else {
                            v.add("No");
                        }
                        v.add(l1.getQtyType().getTypeName());

                        v1.add(v);
                    }
                }
                for (int i = 0; i < v1.size(); i++) {
                    Vector elementAt = (Vector) v1.elementAt(i);
                    dt.addRow(elementAt);
                }
                ses.close();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_TEXT_SEARCHKeyReleased

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        try {

            JTable target = (JTable) evt.getSource();
            int selectedRow = target.getSelectedRow();
            int selectedColumn = target.getSelectedColumn();

            Object value = target.getValueAt(selectedRow, 0);
            selectedvalue = value.toString();
            Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
            Criteria cr = ses.createCriteria(BPos.DB.Stock.class);
            cr.add(Restrictions.eq("idstock", value));
            List<BPos.DB.Stock> cs = cr.list();
            for (BPos.DB.Stock c : cs) {
                Qty.setText(c.getQty() + "");
                BPrice.setText(c.getBuyingPrice() + "");
                SPrice.setText(c.getSellingPrice() + "");
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                Date d = df.parse(c.getExdate());
                int st = c.getStatus();
                if (st == 1) {
                    Active.setSelected(true);
                } else {
                    Deactive.setSelected(true);
                }
                ExpireDate.setDate(d);
                Disco.setText(c.getDiscount() + "");

                QTYTYPES.setSelectedItem(c.getQtyType().getTypeName());

                if (c.getCanloosing() == 1) {
                    jCheckBox1.setSelected(true);
                } else {
                    jCheckBox1.setSelected(false);
                }
            }

        } catch (Exception e) {
        }

    }//GEN-LAST:event_jTable2MouseClicked

    private void COMBO_SEARCHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COMBO_SEARCHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_COMBO_SEARCHActionPerformed

    private void BTN_SAVE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SAVE1ActionPerformed
        clearTEXT();
    }//GEN-LAST:event_BTN_SAVE1ActionPerformed

    private void BTN_UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_UPDATEActionPerformed
        try {
            if (!Qty.getText().equals("")) {
                if (ExpireDate.getDate() != null) {
                    if (!BPrice.getText().equals("")) {
                        if (!SPrice.getText().equals("")) {

                            double bp = Double.parseDouble(BPrice.getText());
                            double sp = Double.parseDouble(SPrice.getText());
//                            if (bp < sp & jCheckBox1.isSelected()) {
                                Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
                                Transaction tr = ses.beginTransaction();
                                BPos.DB.Stock stck = (BPos.DB.Stock) ses.load(BPos.DB.Stock.class, Integer.parseInt(selectedvalue));
                                stck.setQty(Double.parseDouble(Qty.getText()));
                                stck.setBuyingPrice(Double.parseDouble(BPrice.getText()));
                                stck.setSellingPrice(Double.parseDouble(SPrice.getText()));
                                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                                stck.setExdate(df.format(ExpireDate.getDate()));
                                int status = Active.isSelected() ? 1 : 0;
                                stck.setStatus(status);
                                stck.setDiscount(Double.parseDouble(Disco.getText()));
                                Session ses1 = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
                                Criteria cr1 = ses1.createCriteria(BPos.DB.QtyType.class);
                                cr1.add(Restrictions.eq("typeName", QTYTYPES.getSelectedItem().toString()));

                                BPos.DB.QtyType qtypT = (BPos.DB.QtyType) cr1.uniqueResult();
                                stck.setQtyType(qtypT);
                                if(jCheckBox1.isSelected()){
                                    stck.setCanloosing(1);
                                }else{
                                    stck.setCanloosing(1);
                                }
                                ses.update(stck);

                                BPos.DB.Stockupdated sup = new Stockupdated();
                                sup.setDatetime(new Date() + "");
                                sup.setStock(stck);
                                sup.setReason(Reason.getText());
                                ses.save(sup);

                                tr.commit();
                                ses.flush();
                                ses.close();
                                Loadstock();
                                clearTEXT();
//                            } else {
//                                JOptionPane.showMessageDialog(rootPane, "Invalid Selling Price");
//                            }

                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Selling price empty");
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Buying price empty");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Please select expireDate");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter valid qty");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BTN_UPDATEActionPerformed

    private void QtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QtyKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(c >= '0' && c <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_QtyKeyTyped

    private void BPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BPriceKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(c >= '0' && c <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_BPriceKeyTyped

    private void SPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SPriceKeyTyped
         char c = evt.getKeyChar();
        if (!((c >= '0' && c <= '9') || (c == '.' && !SPrice.getText().contains(".")))) {
            evt.consume();
        }
    }//GEN-LAST:event_SPriceKeyTyped

    private void DiscoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DiscoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(c >= '0' && c <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_DiscoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Active;
    private javax.swing.JTextField BPrice;
    private javax.swing.JButton BTN_SAVE1;
    private javax.swing.JButton BTN_UPDATE;
    private javax.swing.JComboBox COMBO_SEARCH;
    private javax.swing.JRadioButton Deactive;
    private javax.swing.JTextField Disco;
    private com.toedter.calendar.JDateChooser ExpireDate;
    private javax.swing.JLabel LAB_COUNT;
    private javax.swing.JComboBox QTYTYPES;
    private javax.swing.JTextField Qty;
    private javax.swing.JTextArea Reason;
    private javax.swing.JTextField SPrice;
    public javax.swing.JPanel Stock_MainPanel;
    private javax.swing.JTextField TEXT_SEARCH;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        new Stock().setVisible(true);
    }
    
    public void Loadstock() {

        Vector v1 = new Vector();
        int t1;
        DefaultTableModel dt = (DefaultTableModel) jTable2.getModel();
        Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
        Criteria cr = ses.createCriteria(BPos.DB.Stock.class);
        List<BPos.DB.Stock> l = cr.list();
        dt.setRowCount(0);
        for (BPos.DB.Stock l1 : l) {
            t1 = l1.getStatus();
            if (t1 == (int) 4) {

            } else {
                Vector v = new Vector();
                v.add(l1.getIdstock());
                v.add(l1.getProducts().getProName());
                v.add(l1.getQty());
                v.add(l1.getBuyDate());
                v.add(l1.getExdate());
                v.add(l1.getBuyingPrice());
                v.add(l1.getSellingPrice());
                int t = l1.getStatus();
                if (t == 1) {
                    v.add("Active");
                } else {
                    v.add("Deactivated");
                }
                v.add(l1.getDiscount() + "%");

                if (l1.getCanloosing() == 1) {
                    v.add("Yes");
                } else {
                    v.add("No");
                }
                v.add(l1.getQtyType().getTypeName());

                v1.add(v);

            }
        }
        for (int i = 0;
                i < v1.size();
                i++) {
            Vector elementAt = (Vector) v1.elementAt(i);
            dt.addRow(elementAt);
        }

        ses.close();
    }

    public void LoadSupplier() {
        Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
        Criteria cr = ses.createCriteria(BPos.DB.Supplier.class
        );
        List<BPos.DB.Supplier> l = cr.list();
        for (BPos.DB.Supplier l1 : l) {
            // COMBO_SEARCH1.addItem(l1.getName());
        }

        ses.close();
    }

    public void clearTEXT() {
        Qty.setText("");
        SPrice.setText("");
        BPrice.setText("");
        ExpireDate.setDate(null);
        Reason.setText("");
        Disco.setText("");
        jCheckBox1.setSelected(false);
        Active.setSelected(false);
        Deactive.setSelected(false);
    }

    public void loadTypes() {
        try {
            Session ses = BPos.Connection.NewHibernateUtil.getSessionFactory().openSession();
            Criteria cr = ses.createCriteria(BPos.DB.QtyType.class);
            List<BPos.DB.QtyType> l = cr.list();
            for (QtyType l1 : l) {
                QTYTYPES.addItem(l1.getTypeName());
            }
            ses.close();
        } catch (Exception e) {
        }
    }

}
